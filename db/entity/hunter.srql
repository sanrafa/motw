DEFINE TABLE hunter SCHEMAFULL;
/*     PERMISSIONS
        FOR create, update FULL
            WHERE user IS NONE OR $auth.id = user
        FOR select FULL
        FOR delete WHERE team.keeper = $auth.id; */

DEFINE FIELD team ON TABLE hunter TYPE record(team) ASSERT $value IS NOT NONE;
DEFINE FIELD user ON TABLE hunter TYPE record(user) VALUE NONE OR $after;
DEFINE FIELD is_active ON TABLE hunter TYPE bool ASSERT $value IS NOT NONE;

-- find attributes that are playbook-specific
-- will be null by default, assert that hunter type is valid
DEFINE FIELD attributes ON TABLE hunter TYPE object;
DEFINE FIELD attributes.playbook ON TABLE hunter TYPE record(playbook) ASSERT $value IS NOT NONE;

DEFINE FIELD attributes.look ON TABLE hunter TYPE array ASSERT array::len($value) == 3;
    DEFINE FIELD attributes.look.* ON TABLE hunter TYPE string; -- may validate for playbook looks

DEFINE FIELD attributes.available_moves ON TABLE hunter TYPE array ASSERT $value IS NOT NONE;
    DEFINE FIELD attributes.available_moves.* ON TABLE hunter TYPE record(move) ASSERT $value.playbook IS NONE OR ($value.playbook == $this.attributes.playbook);

-- Chosen specific
DEFINE FIELD attributes.fate ON TABLE hunter TYPE object VALUE NULL OR $after;
    DEFINE FIELD attributes.fate.found_out ON TABLE hunter TYPE string ASSERT $value INSIDE (SELECT fate.found_out from playbook:chosen);
    DEFINE FIELD attributes.fate.doom ON TABLE hunter TYPE array ASSERT array::len($value) <= 2;
        DEFINE FIELD attributes.fate.doom.* ON TABLE hunter TYPE string ASSERT $value INSIDE (SELECT fate.doom FROM playbook:chosen);
    DEFINE FIELD attributes.fate.heroic ON TABLE hunter TYPE array ASSERT array::len($value) == 2;
        DEFINE FIELD attributes.fate.heroic.* ON TABLE hunter TYPE string ASSERT $value INSIDE (SELECT fate.heroic FROM playbook:chosen);

-- Expert specific
DEFINE FIELD attributes.haven ON TABLE hunter TYPE array VALUE NONE OR $after ASSERT $value IS NONE OR ($this.playbook = playbook:expert OR $this.improvements CONTAINSANY [improvement:flake07, improvement:monstrous07, improvement:spooky08, improvement:wronged07]);
    DEFINE FIELD attributes.haven.* ON TABLE hunter TYPE record(haven);

-- Initiate specific
DEFINE FIELD attributes.sect ON TABLE hunter TYPE object VALUE NONE OR $after ASSERT $value IS NONE OR $this.attributes.playbook = playbook:initiate;
    DEFINE FIELD attributes.sect.name ON TABLE hunter TYPE string;
    DEFINE FIELD attributes.sect.details ON TABLE hunter TYPE string;
    DEFINE FIELD attributes.sect.traditions ON TABLE hunter TYPE object;
        DEFINE FIELD attributes.sect.traditions.good ON TABLE hunter TYPE array;
            DEFINE FIELD attributes.sect.traditions.good.* ON TABLE hunter TYPE string ASSERT $value INSIDE (SELECT sect.traditions.good FROM playbook:initiate);
        DEFINE FIELD attributes.sect.traditions.bad ON TABLE hunter TYPE array;
            DEFINE FIELD attributes.sect.traditions.bad.* ON TABLE hunter TYPE string ASSERT $value INSIDE (SELECT sect.traditions.bad FROM playbook:initiate);

-- Monstrous specific
DEFINE FIELD attributes.breed ON TABLE hunter TYPE object VALUE NONE OR $after ASSERT $value IS NONE OR $this.attributes.playbook = playbook:monstrous;
    DEFINE FIELD attributes.breed.name ON TABLE hunter TYPE string;
    DEFINE FIELD attributes.breed.curse ON TABLE hunter TYPE string ASSERT $value INSIDE (SELECT breed.curse.name FROM playbook:monstrous);
    DEFINE FIELD attributes.breed.natural_attacks ON TABLE hunter TYPE array ASSERT array::len($value) == 2;
        DEFINE FIELD attributes.breed.natural_attacks.* ON TABLE hunter TYPE string ASSERT $value INSIDE (SELECT breed.natural_attacks FROM playbook:monstrous);

-- Professional specific
DEFINE FIELD attributes.agency ON TABLE hunter TYPE object VALUE NONE OR $after ASSERT $value IS NONE OR $this.attributes.playbook = playbook:professional;
    DEFINE FIELD attributes.agency.description ON TABLE hunter TYPE string;
    DEFINE FIELD attributes.agency.goal ON TABLE hunter TYPE string;
    DEFINE FIELD attributes.agency.resources ON TABLE hunter TYPE array ASSERT array::len($value) = 3;
        DEFINE FIELD attributes.agency.resources.* ON TABLE hunter TYPE string ASSERT $value INSIDE (SELECT agency.resources FROM playbook:professional);
    DEFINE FIELD attributes.agency.red_tape ON TABLE hunter TYPE array ASSERT array::len($value) = 2;
        DEFINE FIELD attributes.agency.red_tape.* ON TABLE hunter TYPE string ASSERT $value INSIDE (SELECT agency.red_tape FROM playbook:professional);

-- Spooky specific
DEFINE FIELD attributes.dark_side ON TABLE hunter TYPE array VALUE NONE OR $after ASSERT $value IS NONE OR ($this.attributes.playbook = playbook:spooky AND array::len($value) = 3);
    DEFINE FIELD attributes.dark_side.* ON TABLE hunter TYPE string ASSERT $value INSIDE (SELECT dark_side FROM playbook:spooky);

-- Wronged specific
DEFINE FIELD attributes.loss ON TABLE hunter TYPE object VALUE NONE OR $after ASSERT $value IS NONE OR $this.attributes.playbook = playbook:wronged;
    DEFINE FIELD attributes.loss.relations ON TABLE hunter TYPE array;
        DEFINE FIELD attributes.loss.relations.* ON TABLE hunter TYPE string ASSERT $value INSIDE (SELECT loss.relations FROM playbook:wronged);
    DEFINE FIELD attributes.loss.monster_type ON TABLE hunter TYPE string;
    DEFINE FIELD attributes.loss.flaws ON TABLE hunter TYPE array;
        DEFINE FIELD attributes.loss.flaws.* ON TABLE hunter TYPE string ASSERT $value INSIDE (SELECT loss.flaws FROM playbook:wronged);

DEFINE FIELD attributes.gear ON TABLE hunter TYPE array;
    DEFINE FIELD attributes.gear.* ON TABLE hunter TYPE record(gear) ASSERT $value.playbook IS NONE OR ($value.playbook = $this.attributes.playbook);

DEFINE FIELD attributes.luck ON TABLE hunter TYPE int VALUE $after OR 0 ASSERT $value <= 7;

DEFINE FIELD attributes.experience ON TABLE hunter TYPE int VALUE $after OR 0 ASSERT $value <= 5;

DEFINE FIELD attributes.improvements ON TABLE hunter TYPE array;
    DEFINE FIELD attributes.improvements.* ON TABLE hunter TYPE record(improvements);

DEFINE FIELD attributes.ongoing ON TABLE hunter TYPE int VALUE $after OR 0;
DEFINE FIELD attributes.hold ON TABLE hunter TYPE int VALUE $after OR 0;
DEFINE FIELD attributes.forward ON TABLE hunter TYPE bool VALUE $after OR false;

DEFINE FIELD attributes.harm ON TABLE hunter TYPE object;
    DEFINE FIELD attributes.harm.points ON TABLE hunter TYPE int VALUE $after OR 0 ASSERT $value <= 7;
    DEFINE FIELD attributes.harm.unstable ON TABLE hunter TYPE bool VALUE $after OR false;

DEFINE FIELD attributes.ratings ON TABLE hunter TYPE object;
    DEFINE FIELD attributes.ratings.charm ON TABLE hunter TYPE object;
        DEFINE FIELD attributes.ratings.charm.score ON TABLE hunter TYPE int ASSERT $value >= -1 AND $value <= 3;
        DEFINE FIELD attributes.ratings.charm.highlight ON TABLE hunter TYPE bool VALUE false OR $after;
    DEFINE FIELD attributes.ratings.cool ON TABLE hunter TYPE object;
        DEFINE FIELD attributes.ratings.cool.score ON TABLE hunter TYPE int ASSERT $value >= -1 AND $value <= 3;
        DEFINE FIELD attributes.ratings.cool.highlight ON TABLE hunter TYPE bool VALUE false OR $after;
    DEFINE FIELD attributes.ratings.sharp ON TABLE hunter TYPE object;
        DEFINE FIELD attributes.ratings.sharp.score ON TABLE hunter TYPE int ASSERT $value >= -1 AND $value <= 3;
        DEFINE FIELD attributes.ratings.sharp.highlight ON TABLE hunter TYPE bool VALUE false OR $after;
    DEFINE FIELD attributes.ratings.tough ON TABLE hunter TYPE object;
        DEFINE FIELD attributes.ratings.tough.score ON TABLE hunter TYPE int ASSERT $value >= -1 AND $value <= 3;
        DEFINE FIELD attributes.ratings.tough.highlight ON TABLE hunter TYPE bool VALUE false OR $after;
    DEFINE FIELD attributes.ratings.weird ON TABLE hunter TYPE object;
        DEFINE FIELD attributes.ratings.weird.score ON TABLE hunter TYPE int ASSERT $value >= -1 AND $value <= 3;
        DEFINE FIELD attributes.ratings.weird.highlight ON TABLE hunter TYPE bool VALUE false OR $after;


DEFINE EVENT harm_changed ON TABLE hunter WHEN $before.attributes.harm.points != $after.attributes.harm.points THEN (
    UPDATE $this SET attributes.harm.unstable = ($after.attributes.harm.points > 4)
);

